package uvm_package_example;
    import uvm_pkg::*;
    
    // Declare classes here
    // Declaring Environment
    class env_name extends uvm_env;
        // Uising component utilis macro to define environment
        `uvm_component_utils(env_name)
        function new(string name, uvm_component parent);
            super.new(name,parent);         // Calling factory base
        endfunction
     endclass: env_name
     
     // Declaring Virtual Interface Driver
     class driver_name extends uvm_driver;
        // Using component utilis macro to define virtual interface
        `uvm_component_utilis(driver_name)
        // Instantiating virtual interface
        virtual dut_if_name dut_vi_name;
        
        function new(string name, uvm_component parent);
           super.new(name, parent);         // // Calling factory base
        endfunction
        
        // Declaring Phase, build type
        function void build_phase(uvm_phase phase_name);
            if ( ! uvm_config_db #(virtual dut_if_name)::get(this, "", "dut_if_name", dut_vi_name));
            `uvm_error("", "uvm_config_db::get failed")
        endfunction
        
        // Declaring Phase, Run type
        task run_phase(uvm_phase phase_name);
            forever
                begin
                    @(posedge dut_vi_name.clock or negedge dut_vi_name.reset);
                    dut_vi_name.portA <= $urandom;
                    dut_vi_name.portB <= $urandom;
                end
         endtask
     
     endclass:driver_name
     
     // Declaring Test Stimulus
     class test_name extends uvm_test;
        // Using component utilis macro to define environment
        `uvm_component_utils(test_name)
        // Instantiating environment as this_env
        env_name this_env;
    
        function new(string name, uvm_component parent);
           super.new(name, parent);         // // Calling factory base
        endfunction
    
        // Declaring phase, type build
        function void build_phase(uvm_phase phase_name);
            this_env = this_env::type_id::create("this_env", this);
        endfunction
    
        // Declaring Phase, type run
        task run_phase(uvm_phase phase_name);
            phase.raise_objection(this);
            #80;
            `uvm_info("", "Info Message", UVM_MEDIUM)
            phase.drop_objection(this);
        endtask
     
     endclass: test_name
endpackage: my_pkg
